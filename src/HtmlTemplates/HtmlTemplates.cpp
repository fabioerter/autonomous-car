#include "arduino.h"


String append_joyStick_script()
{
    return F("<script type=\"text/javascript\"> "
             " "
             "        let StickStatus = "
             "        { "
             "            xPosition: 0, "
             "            yPosition: 0, "
             "            x: 0, "
             "            y: 0, "
             "            cardinalDirection: \"C\" "
             "        }; "
             "        var JoyStick = (function (container, parameters, callback) { "
             "            parameters = parameters || {}; "
             "            var title = (typeof parameters.title === \"undefined\" ? \"joystick\" : parameters.title), "
             "                width = (typeof parameters.width === \"undefined\" ? 0 : parameters.width), "
             "                height = (typeof parameters.height === \"undefined\" ? 0 : parameters.height), "
             "                internalFillColor = (typeof parameters.internalFillColor === \"undefined\" ? \"#00AA00\" : parameters.internalFillColor), "
             "                internalLineWidth = (typeof parameters.internalLineWidth === \"undefined\" ? 2 : parameters.internalLineWidth), "
             "                internalStrokeColor = (typeof parameters.internalStrokeColor === \"undefined\" ? \"#003300\" : parameters.internalStrokeColor), "
             "                externalLineWidth = (typeof parameters.externalLineWidth === \"undefined\" ? 2 : parameters.externalLineWidth), "
             "                externalStrokeColor = (typeof parameters.externalStrokeColor === \"undefined\" ? \"#008000\" : parameters.externalStrokeColor), "
             "                autoReturnToCenter = (typeof parameters.autoReturnToCenter === \"undefined\" ? true : parameters.autoReturnToCenter); "
             " "
             "            callback = callback || function (StickStatus) { }; "
             " "
             "            // Create Canvas element and add it in the Container object "
             "            var objContainer = document.getElementById(container); "
             " "
             "            // Fixing Unable to preventDefault inside passive event listener due to target being treated as passive in Chrome [Thanks to https://github.com/artisticfox8 for this suggestion] "
             "            objContainer.style.touchAction = \"none\"; "
             " "
             "            var canvas = document.createElement(\"canvas\"); "
             "            canvas.id = title; "
             "            if (width === 0) { width = objContainer.clientWidth; } "
             "            if (height === 0) { height = objContainer.clientHeight; } "
             "            canvas.width = width; "
             "            canvas.height = height; "
             "            objContainer.appendChild(canvas); "
             "            var context = canvas.getContext(\"2d\"); "
             " "
             "            var pressed = 0; // Bool - 1=Yes - 0=No "
             "            var circumference = 2 * Math.PI; "
             "            var internalRadius = (canvas.width - ((canvas.width / 2) + 10)) / 2; "
             "            var maxMoveStick = internalRadius + 5; "
             "            var externalRadius = internalRadius + 30; "
             "            var centerX = canvas.width / 2; "
             "            var centerY = canvas.height / 2; "
             "            var directionHorizontalLimitPos = canvas.width / 10; "
             "            var directionHorizontalLimitNeg = directionHorizontalLimitPos * -1; "
             "            var directionVerticalLimitPos = canvas.height / 10; "
             "            var directionVerticalLimitNeg = directionVerticalLimitPos * -1; "
             "            // Used to save current position of stick "
             "            var movedX = centerX; "
             "            var movedY = centerY; "
             " "
             "            // Check if the device support the touch or not "
             "            if (\"ontouchstart\" in document.documentElement) { "
             "                canvas.addEventListener(\"touchstart\", onTouchStart, false); "
             "                document.addEventListener(\"touchmove\", onTouchMove, false); "
             "                document.addEventListener(\"touchend\", onTouchEnd, false); "
             "            } "
             "            else { "
             "                canvas.addEventListener(\"mousedown\", onMouseDown, false); "
             "                document.addEventListener(\"mousemove\", onMouseMove, false); "
             "                document.addEventListener(\"mouseup\", onMouseUp, false); "
             "            } "
             "            // Draw the object "
             "            drawExternal(); "
             "            drawInternal(); "
             " "
             "            /****************************************************** "
             "             * Private methods "
             "             *****************************************************/ "
             " "
             "            /** "
             "             * @desc Draw the external circle used as reference position "
             "             */ "
             "            function drawExternal() { "
             "                context.beginPath(); "
             "                context.arc(centerX, centerY, externalRadius, 0, circumference, false); "
             "                context.lineWidth = externalLineWidth; "
             "                context.strokeStyle = externalStrokeColor; "
             "                context.stroke(); "
             "            } "
             " "
             "            /** "
             "             * @desc Draw the internal stick in the current position the user have moved it "
             "             */ "
             "            function drawInternal() { "
             "                context.beginPath(); "
             "                if (movedX < internalRadius) { movedX = maxMoveStick; } "
             "                if ((movedX + internalRadius) > canvas.width) { movedX = canvas.width - (maxMoveStick); } "
             "                if (movedY < internalRadius) { movedY = maxMoveStick; } "
             "                if ((movedY + internalRadius) > canvas.height) { movedY = canvas.height - (maxMoveStick); } "
             "                context.arc(movedX, movedY, internalRadius, 0, circumference, false); "
             "                // create radial gradient "
             "                var grd = context.createRadialGradient(centerX, centerY, 5, centerX, centerY, 200); "
             "                // Light color "
             "                grd.addColorStop(0, internalFillColor); "
             "                // Dark color "
             "                grd.addColorStop(1, internalStrokeColor); "
             "                context.fillStyle = grd; "
             "                context.fill(); "
             "                context.lineWidth = internalLineWidth; "
             "                context.strokeStyle = internalStrokeColor; "
             "                context.stroke(); "
             "            } "
             " "
             "            /** "
             "             * @desc Events for manage touch "
             "             */ "
             "            function onTouchStart(event) { "
             "                pressed = 1; "
             "            } "
             " "
             "            function onTouchMove(event) { "
             "                if (pressed === 1 && event.targetTouches[0].target === canvas) { "
             "                    movedX = event.targetTouches[0].pageX; "
             "                    movedY = event.targetTouches[0].pageY; "
             "                    // Manage offset "
             "                    if (canvas.offsetParent.tagName.toUpperCase() === \"BODY\") { "
             "                        movedX -= canvas.offsetLeft; "
             "                        movedY -= canvas.offsetTop; "
             "                    } "
             "                    else { "
             "                        movedX -= canvas.offsetParent.offsetLeft; "
             "                        movedY -= canvas.offsetParent.offsetTop; "
             "                    } "
             "                    // Delete canvas "
             "                    context.clearRect(0, 0, canvas.width, canvas.height); "
             "                    // Redraw object "
             "                    drawExternal(); "
             "                    drawInternal(); "
             " "
             "                    // Set attribute of callback "
             "                    StickStatus.xPosition = movedX; "
             "                    StickStatus.yPosition = movedY; "
             "                    StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed(); "
             "                    StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed(); "
             "                    StickStatus.cardinalDirection = getCardinalDirection(); "
             "                    callback(StickStatus); "
             "                } "
             "            } "
             " "
             "            function onTouchEnd(event) { "
             "                pressed = 0; "
             "                // If required reset position store variable "
             "                if (autoReturnToCenter) { "
             "                    movedX = centerX; "
             "                    movedY = centerY; "
             "                } "
             "                // Delete canvas "
             "                context.clearRect(0, 0, canvas.width, canvas.height); "
             "                // Redraw object "
             "                drawExternal(); "
             "                drawInternal(); "
             " "
             "                // Set attribute of callback "
             "                StickStatus.xPosition = movedX; "
             "                StickStatus.yPosition = movedY; "
             "                StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed(); "
             "                StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed(); "
             "                StickStatus.cardinalDirection = getCardinalDirection(); "
             "                callback(StickStatus); "
             "            } "
             " "
             "            /** "
             "             * @desc Events for manage mouse "
             "             */ "
             "            function onMouseDown(event) { "
             "                pressed = 1; "
             "            } "
             " "
             "            /* To simplify this code there was a new experimental feature here: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX , but it present only in Mouse case not metod presents in Touch case :-( */ "
             "            function onMouseMove(event) { "
             "                if (pressed === 1) { "
             "                    movedX = event.pageX; "
             "                    movedY = event.pageY; "
             "                    // Manage offset "
             "                    if (canvas.offsetParent.tagName.toUpperCase() === \"BODY\") { "
             "                        movedX -= canvas.offsetLeft; "
             "                        movedY -= canvas.offsetTop; "
             "                    } "
             "                    else { "
             "                        movedX -= canvas.offsetParent.offsetLeft; "
             "                        movedY -= canvas.offsetParent.offsetTop; "
             "                    } "
             "                    // Delete canvas "
             "                    context.clearRect(0, 0, canvas.width, canvas.height); "
             "                    // Redraw object "
             "                    drawExternal(); "
             "                    drawInternal(); "
             " "
             "                    // Set attribute of callback "
             "                    StickStatus.xPosition = movedX; "
             "                    StickStatus.yPosition = movedY; "
             "                    StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed(); "
             "                    StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed(); "
             "                    StickStatus.cardinalDirection = getCardinalDirection(); "
             "                    callback(StickStatus); "
             "                } "
             "            } "
             " "
             "            function onMouseUp(event) { "
             "                pressed = 0; "
             "                // If required reset position store variable "
             "                if (autoReturnToCenter) { "
             "                    movedX = centerX; "
             "                    movedY = centerY; "
             "                } "
             "                // Delete canvas "
             "                context.clearRect(0, 0, canvas.width, canvas.height); "
             "                // Redraw object "
             "                drawExternal(); "
             "                drawInternal(); "
             " "
             "                // Set attribute of callback "
             "                StickStatus.xPosition = movedX; "
             "                StickStatus.yPosition = movedY; "
             "                StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed(); "
             "                StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed(); "
             "                StickStatus.cardinalDirection = getCardinalDirection(); "
             "                callback(StickStatus); "
             "            } "
             " "
             "            function getCardinalDirection() { "
             "                let result = \"\"; "
             "                let orizontal = movedX - centerX; "
             "                let vertical = movedY - centerY; "
             " "
             "                if (vertical >= directionVerticalLimitNeg && vertical <= directionVerticalLimitPos) { "
             "                    result = \"C\"; "
             "                } "
             "                if (vertical < directionVerticalLimitNeg) { "
             "                    result = \"N\"; "
             "                } "
             "                if (vertical > directionVerticalLimitPos) { "
             "                    result = \"S\"; "
             "                } "
             " "
             "                if (orizontal < directionHorizontalLimitNeg) { "
             "                    if (result === \"C\") { "
             "                        result = \"W\"; "
             "                    } "
             "                    else { "
             "                        result += \"W\"; "
             "                    } "
             "                } "
             "                if (orizontal > directionHorizontalLimitPos) { "
             "                    if (result === \"C\") { "
             "                        result = \"E\"; "
             "                    } "
             "                    else { "
             "                        result += \"E\"; "
             "                    } "
             "                } "
             " "
             "                return result; "
             "            } "
             " "
             "            /****************************************************** "
             "             * Public methods "
             "             *****************************************************/ "
             " "
             "            /** "
             "             * @desc The width of canvas "
             "             * @return Number of pixel width  "
             "             */ "
             "            this.GetWidth = function () { "
             "                return canvas.width; "
             "            }; "
             " "
             "            /** "
             "             * @desc The height of canvas "
             "             * @return Number of pixel height "
             "             */ "
             "            this.GetHeight = function () { "
             "                return canvas.height; "
             "            }; "
             " "
             "            /** "
             "             * @desc The X position of the cursor relative to the canvas that contains it and to its dimensions "
             "             * @return Number that indicate relative position "
             "             */ "
             "            this.GetPosX = function () { "
             "                return movedX; "
             "            }; "
             " "
             "            /** "
             "             * @desc The Y position of the cursor relative to the canvas that contains it and to its dimensions "
             "             * @return Number that indicate relative position "
             "             */ "
             "            this.GetPosY = function () { "
             "                return movedY; "
             "            }; "
             " "
             "            /** "
             "             * @desc Normalizzed value of X move of stick "
             "             * @return Integer from -100 to +100 "
             "             */ "
             "            this.GetX = function () { "
             "                return (100 * ((movedX - centerX) / maxMoveStick)).toFixed(); "
             "            }; "
             " "
             "            /** "
             "             * @desc Normalizzed value of Y move of stick "
             "             * @return Integer from -100 to +100 "
             "             */ "
             "            this.GetY = function () { "
             "                return ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed(); "
             "            }; "
             " "
             "            /** "
             "             * @desc Get the direction of the cursor as a string that indicates the cardinal points where this is oriented "
             "             * @return String of cardinal point N, NE, E, SE, S, SW, W, NW and C when it is placed in the center "
             "             */ "
             "            this.GetDir = function () { "
             "                return getCardinalDirection(); "
             "            }; "
             "        }); "
             "    </script>");
}

String append_joyStick_style()
{
    return F("* { "
             "    box-sizing: border-box; "
             "} "
             " "
             "body { "
             "    margin: 0px; "
             "    padding: 0px; "
             "    font-family: monospace; "
             "} "
             " "
             ".row { "
             "    display: inline-flex; "
             "    clear: both; "
             "} "
             " "
             ".columnLateral { "
             "    float: left; "
             "    width: 15%; "
             "    min-width: 300px; "
             "} "
             " "
             ".columnCetral { "
             "    float: left; "
             "    width: 70%; "
             "    min-width: 300px; "
             "} "
             " "
             "#joy2Div { "
             "    width: 200px; "
             "    height: 200px; "
             "    margin: 50px "
             "} "
             " "
             "#joystick { "
             "    border: 1px solid #FF0000; "
             "} "
             " "
             "#joystick2 { "
             "    border: 1px solid #0000FF; "
             "}");
}
String append_joyStick_html()
{
    return F(" < div id =\"joy3Div\" style=\"width:200px;height:200px;margin:50px;position:fixed;bottom:30px;left:500px;\"></div> "
             "    </div> "
             "    <!-- Example of two JoyStick integrated in the page structure --> "
             "    <div class=\"row\"> "
             "        <div class=\"columnLateral\"> "
             "            <div id=\"joy1Div\" style=\"width:200px;height:200px;margin:50px\"></div> "
             "            Posizione X:<input id=\"joy1PosizioneX\" type=\"text\" /><br /> "
             "            Posizione Y:<input id=\"joy1PosizioneY\" type=\"text\" /><br /> "
             "            Direzione:<input id=\"joy1Direzione\" type=\"text\" /><br /> "
             "            X :<input id=\"joy1X\" type=\"text\" /></br> "
             "            Y :<input id=\"joy1Y\" type=\"text\" /> "
             "        </div> "
             "    </div> "
             "    <script type=\"text/javascript\"> "
             "        // Create JoyStick object into the DIV 'joy1Div' "
             "        //var Joy1 = new JoyStick('joy1Div'); "
             " "
             "        var joy1IinputPosX = document.getElementById(\"joy1PosizioneX\"); "
             "        var joy1InputPosY = document.getElementById(\"joy1PosizioneY\"); "
             "        var joy1Direzione = document.getElementById(\"joy1Direzione\"); "
             "        var joy1X = document.getElementById(\"joy1X\"); "
             "        var joy1Y = document.getElementById(\"joy1Y\"); "
             "        /* "
             "        setInterval(function(){ joy1IinputPosX.value=Joy1.GetPosX(); }, 50); "
             "        setInterval(function(){ joy1InputPosY.value=Joy1.GetPosY(); }, 50); "
             "        setInterval(function(){ joy1Direzione.value=Joy1.GetDir(); }, 50); "
             "        setInterval(function(){ joy1X.value=Joy1.GetX(); }, 50); "
             "        setInterval(function(){ joy1Y.value=Joy1.GetY(); }, 50); "
             "        */ "
             "        // Create JoyStick object into the DIV 'joy1Div' "
             "        var Joy1 = new JoyStick('joy1Div', {}, function (stickData) { "
             "            joy1IinputPosX.value = stickData.xPosition; "
             "            joy1InputPosY.value = stickData.yPosition; "
             "            joy1Direzione.value = stickData.cardinalDirection; "
             "            joy1X.value = stickData.x; "
             "            joy1Y.value = stickData.y; "
             "        }); "
             " "
             "        // Create JoyStick object into the DIV 'joy2Div' "
             "        var joy2Param = { \"title\": \"joystick2\", \"autoReturnToCenter\": false }; "
             "        var Joy2 = new JoyStick('joy2Div', joy2Param); "
             " "
             "        var joy2IinputPosX = document.getElementById(\"joy2PosizioneX\"); "
             "        var joy2InputPosY = document.getElementById(\"joy2PosizioneY\"); "
             "        var joy2Direzione = document.getElementById(\"joy2Direzione\"); "
             "        var joy2X = document.getElementById(\"joy2X\"); "
             "        var joy2Y = document.getElementById(\"joy2Y\"); "
             " "
             "        setInterval(function () { joy2IinputPosX.value = Joy2.GetPosX(); }, 50); "
             "        setInterval(function () { joy2InputPosY.value = Joy2.GetPosY(); }, 50); "
             "        setInterval(function () { joy2Direzione.value = Joy2.GetDir(); }, 50); "
             "        setInterval(function () { joy2X.value = Joy2.GetX(); }, 50); "
             "        setInterval(function () { joy2Y.value = Joy2.GetY(); }, 50); "
             " "
             "        var joy3Param = { \"title\": \"joystick3\" }; "
             "        var Joy3 = new JoyStick('joy3Div', joy3Param); "
             " "
             "        var joy3IinputPosX = document.getElementById(\"joy3PosizioneX\"); "
             "        var joy3InputPosY = document.getElementById(\"joy3PosizioneY\"); "
             "        var joy3Direzione = document.getElementById(\"joy3Direzione\"); "
             "        var joy3X = document.getElementById(\"joy3X\"); "
             "        var joy3Y = document.getElementById(\"joy3Y\"); "
             " "
             "        setInterval(function () { joy3IinputPosX.value = Joy3.GetPosX(); }, 50); "
             "        setInterval(function () { joy3InputPosY.value = Joy3.GetPosY(); }, 50); "
             "        setInterval(function () { joy3Direzione.value = Joy3.GetDir(); }, 50); "
             "        setInterval(function () { joy3X.value = Joy3.GetX(); }, 50); "
             "        setInterval(function () { joy3Y.value = Joy3.GetY(); }, 50); "
             "    </script>");
}

String append_page_header(bool AUpdate, String version, String html, String IpAddress)
{
    html = "<!DOCTYPE html><head>";
    // if (AUpdate)
    //     html += F("<meta http-equiv='refresh' content='5'>"); // 30-sec refresh time, test needed to prevent auto updates repeating some commands
    html += F("<title>Veículo autonomo</title>");
    html += F("<style>ul{list-style-type:none;margin:0;padding:0;overflow:hidden;background-color:#31c1f9;font-size:14px;}");
    html += F("li{float:left;}");
    html += F("li a{display:block;text-align:center;padding:5px 25px;text-decoration:none;}");
    html += F("li a:hover{background-color:#FFFFFF;}");
    html += F("h1{background-color:#31c1f9;}");
    html += F("body{width:");
    html += F("px;margin:0 auto;font-family:arial;font-size:14px;text-align:center;color:#ed6495;background-color:#F7F2Fd;}");
    html += F(".tab {");
    html += F("overflow: hidden;");
    html += F("border: 1px solid #ccc;");
    html += F("background-color: #f1f1f1;");
    html += F("}");
    html += F(".tab button {");
    html += F("background-color: inherit;");
    html += F("float: left;");
    html += F("border: none;");
    html += F("outline: none;");
    html += F("cursor: pointer;");
    html += F("padding: 14px 16px;");
    html += F("transition: 0.3s;");
    html += F("font-size: 17px;");
    html += F("}");
    html += F(".tab button:hover {");
    html += F("background-color: #ddd;");
    html += F("}");
    html += F(".tab button.active {");
    html += F("background-color: #ccc;");
    html += F("}");
    html += F(".tabcontent {");
    html += F("display: none;");
    html += F("padding: 6px 12px;");
    html += F("border: 1px solid #ccc;");
    html += F("border-top: none;");
    html += F("}");
    html += F("</style>");
    html += append_joyStick_style();
    html += F("<script>"
              "function openTab(evt, tabName) {"
              "var i, tabcontent, tablinks;"
              "tabcontent = document.getElementsByClassName(\"tabcontent\");"
              "for (i = 0; i < tabcontent.length; i++) {"
              "tabcontent[i].style.display = \"none\";"
              "};"
              "tablinks = document.getElementsByClassName(\"tablinks\");"
              "for (i = 0; i < tablinks.length; i++) {"
              "tablinks[i].className = tablinks[i].className.replace(\" active\", "
              ");"
              "};"
              "document.getElementById(tabName).style.display = \"block\";"
              "evt.currentTarget.className += \" active\";"
              "}"
              "function toggleAutoUpdate(){"
              "const xhttp = new XMLHttpRequest();"
              "xhttp.onload = (e)=>{"
              "console.log(xhttp.responseText);"
              "};"
              "xhttp.open(\"PUT\",window.location.href + \"toggleAutoUpdate\", true);"
              "xhttp.send();"
              "}"
              "</script>");
    html += append_joyStick_script();
    html += F("</head><body><a href='/'><h1>Aguia Branca - Carro Autonomo");
    html += version + "</h1></a>";
    html += F("<div class=\" tab \">");
    html += F("<button class=\" tablinks \" onclick=\" openTab(event, 'Controller') \">Controle</button>");
    html += F("<button class=\" tablinks \" onclick=\" openTab(event, 'Logger') \">Log</button>");
    html += F("<button class=\" tablinks \" onclick=\" openTab(event, 'Tokyo') \">Tokyo</button>");
    html += F("</div>");
    return html;
}

String append_page_footer(bool AUpdate, String html)
{ // Saves repeating many lines of code for HTML page footers
    html += F("<ul>");
    html += F("<li><a href='/clearLog'>LimparLog</a></li>");
    html += F("<li><button onclick=\"toggleAutoUpdate()\">Auto Update:");
    html += !AUpdate ? "ligar" : "desligar";
    html += F("</button></li>");
    html += F("<li><a href='/DV'>Dial</a></li>");
    html += F("<li><a href='/LgTU'>Records&dArr;</a></li>");
    html += F("<li><a href='/LgTD'>Records&uArr;</a></li>");
    html += F("<li><a href='/AS'>AutoScale(");
    html += F("<li><a href='/AU'>Refresh(");
    html += F("<li><a href='/Setup'>Setup</a></li>");
    html += F("<li><a href='/Help'>Help</a></li>");
    html += F("<li><a href='/LogS'>Log Size</a></li>");
    html += F("<li><a href='/LogV'>Log View</a></li>");
    html += F("<li><a href='/LogE'>Log Erase</a></li></ul></div>");
    html += F("<footer><p ");
    html += F("style='background-color:#a3b2f7'>&copy;");
    html += F("</footer></body></html>");
    return html;
}
